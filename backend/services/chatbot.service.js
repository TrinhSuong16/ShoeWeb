import mysql from "mysql2/promise";
import dotenv from "dotenv";
import { GoogleGenerativeAI } from "@google/generative-ai";

dotenv.config();

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// ====== K·∫æT N·ªêI MYSQL ======
const db = await mysql.createConnection({
  host: process.env.DB_HOST || "localhost",
  user: process.env.DB_USER || "root",
  password: process.env.DB_PASS || "S16012004",
  database: process.env.DB_NAME || "shoe_",
});

console.log("‚úÖ ƒê√£ k·∫øt n·ªëi MySQL th√†nh c√¥ng!");

export const chatbotService = {
  async getResponse(userMessage) {
    const lower = userMessage.toLowerCase();

    // ===========================================================
    // 1Ô∏è‚É£ C√ÇU H·ªéI V·ªÄ S·∫¢N PH·∫®M
    // ===========================================================
    if (lower.includes("gi√†y") || lower.includes("s·∫£n ph·∫©m")) {
      // Danh s√°ch lo·∫°i gi√†y
      if (lower.includes("lo·∫°i") || lower.includes("danh s√°ch") || lower.includes("nh√≥m")) {
        const [rows] = await db.execute("SELECT NPS_ten FROM nhom_san_pham LIMIT 10");
        if (rows.length === 0) return "Hi·ªán ch∆∞a c√≥ lo·∫°i s·∫£n ph·∫©m n√†o trong h·ªá th·ªëng.";
        const text = rows.map(r => `- ${r.NPS_ten}`).join("\n");
        return `C√°c lo·∫°i gi√†y hi·ªán c√≥:\n${text}`;
      }

      // Danh s√°ch s·∫£n ph·∫©m
      if (lower.includes("hi·ªán c√≥") || lower.includes("s·∫£n ph·∫©m")) {
        const [rows] = await db.execute("SELECT SP_ten, SP_price FROM san_pham LIMIT 10");
        const text = rows.map(r => `- ${r.SP_ten}: ${r.SP_price} VNƒê`).join("\n");
        return `D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë s·∫£n ph·∫©m ƒëang b√°n:\n${text}`;
      }

      // C√≤n h√†ng hay kh√¥ng
      if (lower.includes("c√≤n h√†ng") || lower.includes("kho")) {
        const [rows] = await db.execute(
          "SELECT s.SP_ten, k.so_luong FROM san_pham s JOIN kho_san_pham k ON s.SP_ma = k.SP_ma WHERE k.so_luong > 0 LIMIT 10"
        );
        if (rows.length === 0) return "Hi·ªán t·∫°i c√°c s·∫£n ph·∫©m ƒë·ªÅu ƒë√£ h·∫øt h√†ng üò¢";
        const text = rows.map(r => `- ${r.SP_ten} (SL: ${r.so_luong})`).join("\n");
        return `C√°c s·∫£n ph·∫©m c√≤n h√†ng:\n${text}`;
      }

      // T√¨m theo m√†u ho·∫∑c size
      if (lower.includes("m√†u") || lower.includes("size") || lower.includes("k√≠ch th∆∞·ªõc")) {
        const [rows] = await db.execute("SELECT SP_ten, SP_color, SP_size, SP_price FROM san_pham LIMIT 10");
        const text = rows.map(r => `- ${r.SP_ten}: m√†u ${r.SP_color}, size ${r.SP_size}, gi√° ${r.SP_price} VNƒê`).join("\n");
        return `M·ªôt v√†i s·∫£n ph·∫©m v√† th√¥ng tin chi ti·∫øt:\n${text}`;
      }
    }

    // ===========================================================
    // 2Ô∏è‚É£ C√ÇU H·ªéI V·ªÄ ƒê∆†N H√ÄNG
    // ===========================================================
    if (lower.includes("ƒë∆°n h√†ng") || lower.includes("h√≥a ƒë∆°n")) {
      // Danh s√°ch ƒë∆°n g·∫ßn nh·∫•t
      if (lower.includes("g·∫ßn ƒë√¢y") || lower.includes("m·ªõi nh·∫•t")) {
        const [rows] = await db.execute(
          "SELECT DH_ma, DH_orderdate, DH_totalprice, DH_trangthai FROM don_hang ORDER BY DH_orderdate DESC LIMIT 5"
        );
        if (rows.length === 0) return "Hi·ªán ch∆∞a c√≥ ƒë∆°n h√†ng n√†o trong h·ªá th·ªëng.";
        const text = rows
          .map(r => `- M√£: ${r.DH_ma}, Ng√†y: ${r.DH_orderdate}, T·ªïng: ${r.DH_totalprice} VNƒê, Tr·∫°ng th√°i: ${r.DH_trangthai}`)
          .join("\n");
        return `C√°c ƒë∆°n h√†ng g·∫ßn ƒë√¢y:\n${text}`;
      }

      // Tr·∫°ng th√°i ƒë∆°n h√†ng
      if (lower.includes("tr·∫°ng th√°i") || lower.includes("t√¨nh tr·∫°ng")) {
        const [rows] = await db.execute(
          "SELECT DH_ma, DH_trangthai FROM don_hang ORDER BY DH_orderdate DESC LIMIT 5"
        );
        const text = rows.map(r => `- ƒê∆°n ${r.DH_ma}: ${r.DH_trangthai}`).join("\n");
        return `Tr·∫°ng th√°i c√°c ƒë∆°n h√†ng g·∫ßn ƒë√¢y:\n${text}`;
      }

      // T·ªïng ti·ªÅn ƒë∆°n h√†ng
      if (lower.includes("t·ªïng ti·ªÅn") || lower.includes("gi√° tr·ªã")) {
        const [rows] = await db.execute(
          "SELECT DH_ma, DH_totalprice FROM don_hang ORDER BY DH_orderdate DESC LIMIT 5"
        );
        const text = rows.map(r => `- ${r.DH_ma}: ${r.DH_totalprice} VNƒê`).join("\n");
        return `T·ªïng gi√° tr·ªã c√°c ƒë∆°n g·∫ßn ƒë√¢y:\n${text}`;
      }
    }

    // ===========================================================
    // 3Ô∏è‚É£ C√ÇU H·ªéI CHUNG (FAQ)
    // ===========================================================
    const faqList = [
      { key: ["m·ªü c·ª≠a", "ho·∫°t ƒë·ªông"], answer: "Shop m·ªü c·ª≠a t·ª´ 8:00 s√°ng ƒë·∫øn 21:00 t·ªëi m·ªói ng√†y." },
      { key: ["ƒë·ªãa ch·ªâ", "·ªü ƒë√¢u", "chi nh√°nh"], answer: "Shop c√≥ 3 chi nh√°nh: Qu·∫≠n 1, Qu·∫≠n 7 v√† Th·ªß ƒê·ª©c." },
      { key: ["ƒë·ªïi tr·∫£", "b·∫£o h√†nh"], answer: "Shop h·ªó tr·ª£ ƒë·ªïi tr·∫£ trong v√≤ng 7 ng√†y n·∫øu s·∫£n ph·∫©m ch∆∞a s·ª≠ d·ª•ng." },
      { key: ["khuy·∫øn m√£i", "gi·∫£m gi√°"], answer: "Hi·ªán ƒëang c√≥ ch∆∞∆°ng tr√¨nh gi·∫£m 20% cho ƒë∆°n h√†ng tr√™n 2 tri·ªáu ƒë·ªìng." },
      { key: ["ship", "giao h√†ng"], answer: "Shop giao h√†ng to√†n qu·ªëc, mi·ªÖn ph√≠ ƒë∆°n t·ª´ 1 tri·ªáu ƒë·ªìng." },
    ];

    for (const f of faqList) {
      if (f.key.some(k => lower.includes(k))) {
        return f.answer;
      }
    }

    // ===========================================================
    // 4Ô∏è‚É£ M·∫∂C ƒê·ªäNH: H·ªéI GEMINI
    // ===========================================================
    try {
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
      const result = await model.generateContent(userMessage);
      return result.response.text();
    } catch (err) {
      console.error("‚ùå L·ªói Gemini:", err);
      return "Xin l·ªói, hi·ªán t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.";
    }
  },
};
